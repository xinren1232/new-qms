events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # 基础配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 配置中心集群
    upstream config_cluster {
        # 主节点权重最高
        server config-primary:8081 weight=3 max_fails=2 fail_timeout=30s;
        # 从节点权重适中
        server config-secondary:8081 weight=2 max_fails=2 fail_timeout=30s;
        server config-tertiary:8081 weight=1 max_fails=2 fail_timeout=30s;
        
        # 保持会话一致性
        ip_hash;
        
        # 健康检查
        keepalive 32;
    }

    # 主服务器配置
    server {
        listen 80;
        server_name localhost;

        # 安全头
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";

        # 配置中心代理
        location / {
            proxy_pass http://config_cluster;
            
            # 代理头设置
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超时设置
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # 错误处理
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            
            # 缓冲设置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # 重试机制
            proxy_retry_timeout 30s;
        }

        # API健康检查端点
        location /health {
            access_log off;
            
            # 检查上游服务器
            proxy_pass http://config_cluster/health;
            proxy_connect_timeout 2s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
            
            # 如果上游失败，返回本地健康状态
            error_page 502 503 504 = @health_fallback;
        }

        # 健康检查降级
        location @health_fallback {
            access_log off;
            return 503 '{"status":"degraded","message":"部分配置节点不可用"}';
            add_header Content-Type application/json;
        }

        # 负载均衡状态页面
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.20.0.0/16;
            deny all;
        }

        # 配置管理API
        location /api/config {
            proxy_pass http://config_cluster/api/config;
            
            # API特殊设置
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # 更长的超时时间用于配置操作
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 禁用缓存确保配置实时性
            proxy_cache off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # WebSocket支持（如果需要）
        location /ws {
            proxy_pass http://config_cluster;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket特殊超时设置
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }

        # 静态文件缓存
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            proxy_pass http://config_cluster;
            proxy_cache_valid 200 1h;
            add_header Cache-Control "public, max-age=3600";
            expires 1h;
        }

        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # 配置中心管理界面（可选）
    server {
        listen 8090;
        server_name localhost;

        location / {
            return 200 '
<!DOCTYPE html>
<html>
<head>
    <title>QMS配置中心集群状态</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
        .healthy { background-color: #d4edda; color: #155724; }
        .unhealthy { background-color: #f8d7da; color: #721c24; }
    </style>
</head>
<body>
    <h1>QMS配置中心集群状态</h1>
    <div class="status healthy">
        <h3>负载均衡器</h3>
        <p>状态: 运行中</p>
        <p>访问地址: <a href="http://localhost:8080">http://localhost:8080</a></p>
    </div>
    <div class="status">
        <h3>配置节点</h3>
        <ul>
            <li>主节点: <a href="http://localhost:8081">http://localhost:8081</a></li>
            <li>从节点1: <a href="http://localhost:8082">http://localhost:8082</a></li>
            <li>从节点2: <a href="http://localhost:8083">http://localhost:8083</a></li>
        </ul>
    </div>
</body>
</html>';
            add_header Content-Type text/html;
        }
    }
}
