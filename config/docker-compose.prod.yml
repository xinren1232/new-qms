version: '3.8'

services:
  # Nginx - 反向代理和负载均衡
  nginx:
    image: nginx:alpine
    container_name: qms-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - qms-auth-service
      - qms-config-service
      - qms-chat-service
    networks:
      - qms-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # QMS认证服务
  qms-auth-service:
    build:
      context: ../backend/nodejs
      dockerfile: Dockerfile.auth
    container_name: qms-auth-service
    ports:
      - "8084:8084"
    environment:
      - NODE_ENV=production
      - PORT=8084
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-qms}
      - DB_USER=${DB_USER:-qms}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./logs/auth:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - qms-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # QMS配置中心服务
  qms-config-service:
    build:
      context: ../backend/nodejs
      dockerfile: Dockerfile.config
    container_name: qms-config-service
    ports:
      - "8083:8083"
    environment:
      - NODE_ENV=production
      - PORT=8083
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    volumes:
      - ./logs/config:/app/logs
      - config_data:/app/config/data
    depends_on:
      - redis
    networks:
      - qms-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # QMS聊天服务
  qms-chat-service:
    build:
      context: ../backend/nodejs
      dockerfile: Dockerfile.chat
    container_name: qms-chat-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-qms}
      - DB_USER=${DB_USER:-qms}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - CONFIG_SERVICE_URL=http://qms-config-service:8083
      - TRANSSION_API_KEY=${TRANSSION_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
    volumes:
      - ./logs/chat:/app/logs
      - chat_data:/app/database
    depends_on:
      - postgres
      - redis
      - qms-config-service
    networks:
      - qms-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL数据库
  postgres:
    image: postgres:14-alpine
    container_name: qms-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-qms}
      - POSTGRES_USER=${DB_USER:-qms}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - qms-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-qms} -d ${DB_NAME:-qms}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: qms-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - qms-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # QMS前端服务
  qms-frontend:
    build:
      context: ../frontend/应用端
      dockerfile: Dockerfile.prod
    container_name: qms-frontend
    ports:
      - "8081:80"
    volumes:
      - ./nginx/frontend.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - qms-auth-service
      - qms-config-service
      - qms-chat-service
    networks:
      - qms-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: qms-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - qms-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Grafana监控面板
  grafana:
    image: grafana/grafana:latest
    container_name: qms-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - qms-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # QMS服务 - 多实例部署
  qms-ai-service-1:
    build:
      context: ./backend
      dockerfile: Dockerfile.ai-service
    container_name: qms-ai-service-1
    environment:
      - NODE_ENV=production
      - CONSUL_HOST=consul-1
      - DB_HOST=postgres-master
      - REDIS_HOST=redis-master
      - ELASTICSEARCH_HOST=elasticsearch
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      - consul-1
      - postgres-master
      - redis-master
    networks:
      - qms-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  qms-ai-service-2:
    build:
      context: ./backend
      dockerfile: Dockerfile.ai-service
    container_name: qms-ai-service-2
    environment:
      - NODE_ENV=production
      - CONSUL_HOST=consul-1
      - DB_HOST=postgres-master
      - REDIS_HOST=redis-master
      - ELASTICSEARCH_HOST=elasticsearch
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      - consul-1
      - postgres-master
      - redis-master
    networks:
      - qms-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 健康检查服务
  health-checker:
    image: alpine:latest
    container_name: qms-health-checker
    command: >
      sh -c "
        apk add --no-cache curl &&
        while true; do
          echo 'Health check at $(date)' &&
          curl -f http://consul-1:8500/v1/health/state/any || echo 'Consul health check failed' &&
          curl -f http://postgres-master:5432 || echo 'PostgreSQL health check failed' &&
          curl -f http://redis-master:6379 || echo 'Redis health check failed' &&
          sleep 60
        done
      "
    depends_on:
      - consul-1
      - postgres-master
      - redis-master
    networks:
      - qms-network

volumes:
  consul_1_data:
  consul_2_data:
  consul_3_data:
  postgres_master_data:
  postgres_slave_data:
  redis_master_data:
  redis_slave_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  qms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
