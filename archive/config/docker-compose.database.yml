# QMS-AI数据库升级版 - PostgreSQL + Redis
version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: qms-postgres
    environment:
      POSTGRES_DB: qms
      POSTGRES_USER: qms_app
      POSTGRES_PASSWORD: ${DB_PASSWORD:-qms123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/nodejs/database/postgresql-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - qms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qms_app -d qms"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: qms-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - qms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # QMS聊天服务 (升级版)
  qms-chat-service:
    build:
      context: ./backend/nodejs
      dockerfile: Dockerfile
    container_name: qms-chat-service
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DB_TYPE=postgresql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=qms
      - DB_USER=qms_app
      - DB_PASSWORD=${DB_PASSWORD:-qms123}
      - CACHE_ENABLED=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - JWT_SECRET=${JWT_SECRET:-qms_ai_jwt_secret_key_2025}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - qms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # QMS配置中心服务
  qms-config-service:
    build:
      context: ./backend/nodejs
      dockerfile: Dockerfile.config
    container_name: qms-config-service
    environment:
      - NODE_ENV=production
      - PORT=8081
      - DB_TYPE=postgresql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=qms
      - DB_USER=qms_app
      - DB_PASSWORD=${DB_PASSWORD:-qms123}
      - CACHE_ENABLED=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - JWT_SECRET=${JWT_SECRET:-qms_ai_jwt_secret_key_2025}
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - qms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # QMS高级功能服务
  qms-advanced-service:
    build:
      context: ./backend/nodejs
      dockerfile: Dockerfile.advanced
    container_name: qms-advanced-service
    environment:
      - NODE_ENV=production
      - PORT=3009
      - DB_TYPE=postgresql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=qms
      - DB_USER=qms_app
      - DB_PASSWORD=${DB_PASSWORD:-qms123}
      - CACHE_ENABLED=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    ports:
      - "3009:3009"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - qms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 数据库管理工具 (可选)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: qms-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@qms.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - qms-network
    restart: unless-stopped
    profiles:
      - tools

  # Redis管理工具 (可选)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: qms-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - qms-network
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  qms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
